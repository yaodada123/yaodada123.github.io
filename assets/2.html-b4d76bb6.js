const n=JSON.parse('{"key":"v-7bbc18fc","path":"/posts/banana/2.html","title":"Java代码实现对称加密DES和AES(含图像界面)","lang":"zh-CN","frontmatter":{"icon":"edit","date":"2023-04-04T00:00:00.000Z","category":["java"],"tag":["黄","弯曲的","长"],"star":10,"head":[["meta",{"name":"referrer","content":"no-referrer"}],["meta",{"property":"og:url","content":"https://www.yaohc.top/posts/banana/2.html"}],["meta",{"property":"og:site_name","content":"摇一摇的博客"}],["meta",{"property":"og:title","content":"Java代码实现对称加密DES和AES(含图像界面)"}],["meta",{"property":"og:description","content":"Java代码实现对称加密DES和AES(含图像界面) 实验内容和要求 采用Java实现采用对称密码算法的应用软件，所用算法包括DES算法和AES算法。要求该软件具有图形用户界面，能生成密钥，以及对字符串和文件进行加解密 参考代码 // 文件名： test01.java import javax.crypto.*; import javax.crypto.spec.*; import javax.swing.*; import java.awt.*; import java.awt.event.*; import java.io.*; import java.nio.charset.StandardCharsets; public class test01 extends JFrame implements ActionListener { private JFileChooser fileChooser = new JFileChooser(); private JTextArea inputArea = new JTextArea(10, 40); private JTextArea outputArea = new JTextArea(10, 40); private JButton encryptButton = new JButton(\\"加密\\"); private JButton decryptButton = new JButton(\\"解密\\"); private JButton fileButton = new JButton(\\"选择文件\\"); private JComboBox&lt;String&gt; algorithmBox = new JComboBox&lt;String&gt;(new String[] {\\"DES\\", \\"AES\\"}); private JLabel keyLabel = new JLabel(\\"密钥:\\"); private JTextField keyField = new JTextField(20); public test01() { super(\\"对称加密算法实现\\"); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); JPanel mainPanel = new JPanel(); mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS)); JPanel inputPanel = new JPanel(); inputPanel.add(new JLabel(\\"输入:\\")); inputPanel.add(new JScrollPane(inputArea)); JPanel outputPanel = new JPanel(); outputPanel.add(new JLabel(\\"输出:\\")); outputPanel.add(new JScrollPane(outputArea)); JPanel buttonPanel = new JPanel(); buttonPanel.add(encryptButton); buttonPanel.add(decryptButton); buttonPanel.add(fileButton); buttonPanel.add(algorithmBox); buttonPanel.add(keyLabel); buttonPanel.add(keyField); mainPanel.add(inputPanel); mainPanel.add(outputPanel); mainPanel.add(buttonPanel); encryptButton.addActionListener(this); decryptButton.addActionListener(this); fileButton.addActionListener(this); setContentPane(mainPanel); pack(); setVisible(true); } public void actionPerformed(ActionEvent e) { if (e.getSource() == encryptButton) { encrypt(); } else if (e.getSource() == decryptButton) { decrypt(); } else if (e.getSource() == fileButton) { chooseFile(); } } private void chooseFile() { int returnValue = fileChooser.showOpenDialog(this); if (returnValue == JFileChooser.APPROVE_OPTION) { File file = fileChooser.getSelectedFile(); try { BufferedReader reader = new BufferedReader(new FileReader(file)); inputArea.setText(\\"\\"); String line = reader.readLine(); while (line != null) { inputArea.append(line); line = reader.readLine(); if (line != null) { inputArea.append(\\"\\\\n\\"); } } reader.close(); } catch (IOException e) { JOptionPane.showMessageDialog(this, \\"Error reading file: \\" + e.getMessage(), \\"Error\\", JOptionPane.ERROR_MESSAGE); } } } private void encrypt() { try { String algorithm = (String) algorithmBox.getSelectedItem(); String keyString = keyField.getText(); byte[] keyBytes = keyString.getBytes(StandardCharsets.UTF_8); SecretKey key; if (algorithm.equals(\\"DES\\")) { key = new SecretKeySpec(keyBytes, \\"DES\\"); } else { key = new SecretKeySpec(keyBytes, \\"AES\\"); } Cipher cipher = Cipher.getInstance(algorithm); cipher.init(Cipher.ENCRYPT_MODE, key); String input = inputArea.getText(); byte[] inputBytes = input.getBytes(StandardCharsets.UTF_8); byte[] outputBytes = cipher.doFinal(inputBytes); String output = new String(outputBytes, StandardCharsets.UTF_8); outputArea.setText(output); } catch (Exception e) { JOptionPane.showMessageDialog(this, \\"Error encrypting: \\" + e.getMessage(), \\"Error\\", JOptionPane.ERROR_MESSAGE); } } private void decrypt() { try { String algorithm = (String) algorithmBox.getSelectedItem(); String keyString = keyField.getText(); byte[] keyBytes = keyString.getBytes(); SecretKey key; if (algorithm.equals(\\"DES\\")) { key = new SecretKeySpec(keyBytes, \\"DES\\"); } else { key = new SecretKeySpec(keyBytes, \\"AES\\"); } Cipher cipher = Cipher.getInstance(algorithm); cipher.init(Cipher.DECRYPT_MODE, key); String input = inputArea.getText(); byte[] inputBytes = input.getBytes(); byte[] outputBytes = cipher.doFinal(inputBytes); String output = new String(outputBytes); outputArea.setText(output); } catch (Exception e) { JOptionPane.showMessageDialog(this, \\"Error decrypting: \\" + e.getMessage(), \\"Error\\", JOptionPane.ERROR_MESSAGE); } } public static void main(String[] args) { new test01(); } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-04T07:59:25.000Z"}],["meta",{"property":"article:tag","content":"黄"}],["meta",{"property":"article:tag","content":"弯曲的"}],["meta",{"property":"article:tag","content":"长"}],["meta",{"property":"article:published_time","content":"2023-04-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-04-04T07:59:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java代码实现对称加密DES和AES(含图像界面)\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-04-04T00:00:00.000Z\\",\\"dateModified\\":\\"2023-04-04T07:59:25.000Z\\",\\"author\\":[]}"]],"description":"Java代码实现对称加密DES和AES(含图像界面) 实验内容和要求 采用Java实现采用对称密码算法的应用软件，所用算法包括DES算法和AES算法。要求该软件具有图形用户界面，能生成密钥，以及对字符串和文件进行加解密 参考代码 // 文件名： test01.java import javax.crypto.*; import javax.crypto.spec.*; import javax.swing.*; import java.awt.*; import java.awt.event.*; import java.io.*; import java.nio.charset.StandardCharsets; public class test01 extends JFrame implements ActionListener { private JFileChooser fileChooser = new JFileChooser(); private JTextArea inputArea = new JTextArea(10, 40); private JTextArea outputArea = new JTextArea(10, 40); private JButton encryptButton = new JButton(\\"加密\\"); private JButton decryptButton = new JButton(\\"解密\\"); private JButton fileButton = new JButton(\\"选择文件\\"); private JComboBox&lt;String&gt; algorithmBox = new JComboBox&lt;String&gt;(new String[] {\\"DES\\", \\"AES\\"}); private JLabel keyLabel = new JLabel(\\"密钥:\\"); private JTextField keyField = new JTextField(20); public test01() { super(\\"对称加密算法实现\\"); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); JPanel mainPanel = new JPanel(); mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS)); JPanel inputPanel = new JPanel(); inputPanel.add(new JLabel(\\"输入:\\")); inputPanel.add(new JScrollPane(inputArea)); JPanel outputPanel = new JPanel(); outputPanel.add(new JLabel(\\"输出:\\")); outputPanel.add(new JScrollPane(outputArea)); JPanel buttonPanel = new JPanel(); buttonPanel.add(encryptButton); buttonPanel.add(decryptButton); buttonPanel.add(fileButton); buttonPanel.add(algorithmBox); buttonPanel.add(keyLabel); buttonPanel.add(keyField); mainPanel.add(inputPanel); mainPanel.add(outputPanel); mainPanel.add(buttonPanel); encryptButton.addActionListener(this); decryptButton.addActionListener(this); fileButton.addActionListener(this); setContentPane(mainPanel); pack(); setVisible(true); } public void actionPerformed(ActionEvent e) { if (e.getSource() == encryptButton) { encrypt(); } else if (e.getSource() == decryptButton) { decrypt(); } else if (e.getSource() == fileButton) { chooseFile(); } } private void chooseFile() { int returnValue = fileChooser.showOpenDialog(this); if (returnValue == JFileChooser.APPROVE_OPTION) { File file = fileChooser.getSelectedFile(); try { BufferedReader reader = new BufferedReader(new FileReader(file)); inputArea.setText(\\"\\"); String line = reader.readLine(); while (line != null) { inputArea.append(line); line = reader.readLine(); if (line != null) { inputArea.append(\\"\\\\n\\"); } } reader.close(); } catch (IOException e) { JOptionPane.showMessageDialog(this, \\"Error reading file: \\" + e.getMessage(), \\"Error\\", JOptionPane.ERROR_MESSAGE); } } } private void encrypt() { try { String algorithm = (String) algorithmBox.getSelectedItem(); String keyString = keyField.getText(); byte[] keyBytes = keyString.getBytes(StandardCharsets.UTF_8); SecretKey key; if (algorithm.equals(\\"DES\\")) { key = new SecretKeySpec(keyBytes, \\"DES\\"); } else { key = new SecretKeySpec(keyBytes, \\"AES\\"); } Cipher cipher = Cipher.getInstance(algorithm); cipher.init(Cipher.ENCRYPT_MODE, key); String input = inputArea.getText(); byte[] inputBytes = input.getBytes(StandardCharsets.UTF_8); byte[] outputBytes = cipher.doFinal(inputBytes); String output = new String(outputBytes, StandardCharsets.UTF_8); outputArea.setText(output); } catch (Exception e) { JOptionPane.showMessageDialog(this, \\"Error encrypting: \\" + e.getMessage(), \\"Error\\", JOptionPane.ERROR_MESSAGE); } } private void decrypt() { try { String algorithm = (String) algorithmBox.getSelectedItem(); String keyString = keyField.getText(); byte[] keyBytes = keyString.getBytes(); SecretKey key; if (algorithm.equals(\\"DES\\")) { key = new SecretKeySpec(keyBytes, \\"DES\\"); } else { key = new SecretKeySpec(keyBytes, \\"AES\\"); } Cipher cipher = Cipher.getInstance(algorithm); cipher.init(Cipher.DECRYPT_MODE, key); String input = inputArea.getText(); byte[] inputBytes = input.getBytes(); byte[] outputBytes = cipher.doFinal(inputBytes); String output = new String(outputBytes); outputArea.setText(output); } catch (Exception e) { JOptionPane.showMessageDialog(this, \\"Error decrypting: \\" + e.getMessage(), \\"Error\\", JOptionPane.ERROR_MESSAGE); } } public static void main(String[] args) { new test01(); } }"},"headers":[{"level":2,"title":"实验内容和要求","slug":"实验内容和要求","link":"#实验内容和要求","children":[]},{"level":2,"title":"参考代码","slug":"参考代码","link":"#参考代码","children":[]}],"git":{"createdTime":1678892488000,"updatedTime":1680595165000,"contributors":[{"name":"yhc","email":"2580577036@qq.com","commits":2}]},"readingTime":{"minutes":1.75,"words":524},"filePathRelative":"posts/banana/2.md","localizedDate":"2023年4月4日","excerpt":"<h1> Java代码实现对称加密DES和AES(含图像界面)</h1>\\n<h2> 实验内容和要求</h2>\\n<p>采用Java实现采用对称密码算法的应用软件，所用算法包括DES算法和AES算法。要求该软件具有图形用户界面，能生成密钥，以及对字符串和文件进行加解密</p>\\n<h2> 参考代码</h2>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token comment\\">// 文件名： test01.java</span>\\n\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">javax<span class=\\"token punctuation\\">.</span>crypto<span class=\\"token punctuation\\">.</span></span><span class=\\"token operator\\">*</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">javax<span class=\\"token punctuation\\">.</span>crypto<span class=\\"token punctuation\\">.</span>spec<span class=\\"token punctuation\\">.</span></span><span class=\\"token operator\\">*</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">javax<span class=\\"token punctuation\\">.</span>swing<span class=\\"token punctuation\\">.</span></span><span class=\\"token operator\\">*</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>awt<span class=\\"token punctuation\\">.</span></span><span class=\\"token operator\\">*</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>awt<span class=\\"token punctuation\\">.</span>event<span class=\\"token punctuation\\">.</span></span><span class=\\"token operator\\">*</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>io<span class=\\"token punctuation\\">.</span></span><span class=\\"token operator\\">*</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>nio<span class=\\"token punctuation\\">.</span>charset<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">StandardCharsets</span></span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> test01 <span class=\\"token keyword\\">extends</span> <span class=\\"token class-name\\">JFrame</span> <span class=\\"token keyword\\">implements</span> <span class=\\"token class-name\\">ActionListener</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">JFileChooser</span> fileChooser <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">JFileChooser</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">JTextArea</span> inputArea <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">JTextArea</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">10</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">40</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">JTextArea</span> outputArea <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">JTextArea</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">10</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">40</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">JButton</span> encryptButton <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">JButton</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"加密\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">JButton</span> decryptButton <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">JButton</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"解密\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">JButton</span> fileButton <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">JButton</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"选择文件\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">JComboBox</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">&gt;</span></span> algorithmBox <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">JComboBox</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> <span class=\\"token punctuation\\">{</span><span class=\\"token string\\">\\"DES\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"AES\\"</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">JLabel</span> keyLabel <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">JLabel</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"密钥:\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">JTextField</span> keyField <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">JTextField</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">20</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token function\\">test01</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">super</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"对称加密算法实现\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token function\\">setDefaultCloseOperation</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">JFrame</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">EXIT_ON_CLOSE</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">JPanel</span> mainPanel <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">JPanel</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        mainPanel<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">setLayout</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">BoxLayout</span><span class=\\"token punctuation\\">(</span>mainPanel<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">BoxLayout</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">Y_AXIS</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">JPanel</span> inputPanel <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">JPanel</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        inputPanel<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">JLabel</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"输入:\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        inputPanel<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">JScrollPane</span><span class=\\"token punctuation\\">(</span>inputArea<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">JPanel</span> outputPanel <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">JPanel</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        outputPanel<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">JLabel</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"输出:\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        outputPanel<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">JScrollPane</span><span class=\\"token punctuation\\">(</span>outputArea<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">JPanel</span> buttonPanel <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">JPanel</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        buttonPanel<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span>encryptButton<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        buttonPanel<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span>decryptButton<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        buttonPanel<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span>fileButton<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        buttonPanel<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span>algorithmBox<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        buttonPanel<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span>keyLabel<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        buttonPanel<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span>keyField<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        mainPanel<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span>inputPanel<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        mainPanel<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span>outputPanel<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        mainPanel<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span>buttonPanel<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        encryptButton<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">addActionListener</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        decryptButton<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">addActionListener</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        fileButton<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">addActionListener</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token function\\">setContentPane</span><span class=\\"token punctuation\\">(</span>mainPanel<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token function\\">pack</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token function\\">setVisible</span><span class=\\"token punctuation\\">(</span><span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">actionPerformed</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">ActionEvent</span> e<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getSource</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">==</span> encryptButton<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token function\\">encrypt</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getSource</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">==</span> decryptButton<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token function\\">decrypt</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getSource</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">==</span> fileButton<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token function\\">chooseFile</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">chooseFile</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">int</span> returnValue <span class=\\"token operator\\">=</span> fileChooser<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">showOpenDialog</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>returnValue <span class=\\"token operator\\">==</span> <span class=\\"token class-name\\">JFileChooser</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">APPROVE_OPTION</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token class-name\\">File</span> file <span class=\\"token operator\\">=</span> fileChooser<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getSelectedFile</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token class-name\\">BufferedReader</span> reader <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">BufferedReader</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">FileReader</span><span class=\\"token punctuation\\">(</span>file<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                inputArea<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">setText</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token class-name\\">String</span> line <span class=\\"token operator\\">=</span> reader<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">readLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>line <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                    inputArea<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">append</span><span class=\\"token punctuation\\">(</span>line<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                    line <span class=\\"token operator\\">=</span> reader<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">readLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>line <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                        inputArea<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">append</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"\\\\n\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                    <span class=\\"token punctuation\\">}</span>\\n                <span class=\\"token punctuation\\">}</span>\\n                reader<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">close</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">IOException</span> e<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token class-name\\">JOptionPane</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">showMessageDialog</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"Error reading file: \\"</span> <span class=\\"token operator\\">+</span> e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getMessage</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"Error\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">JOptionPane</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">ERROR_MESSAGE</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">encrypt</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token class-name\\">String</span> algorithm <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">)</span> algorithmBox<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getSelectedItem</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token class-name\\">String</span> keyString <span class=\\"token operator\\">=</span> keyField<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getText</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">byte</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> keyBytes <span class=\\"token operator\\">=</span> keyString<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getBytes</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">StandardCharsets</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">UTF_8</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token class-name\\">SecretKey</span> key<span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>algorithm<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">equals</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"DES\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                key <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">SecretKeySpec</span><span class=\\"token punctuation\\">(</span>keyBytes<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"DES\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n                key <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">SecretKeySpec</span><span class=\\"token punctuation\\">(</span>keyBytes<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"AES\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token class-name\\">Cipher</span> cipher <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">Cipher</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getInstance</span><span class=\\"token punctuation\\">(</span>algorithm<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            cipher<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">init</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Cipher</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">ENCRYPT_MODE</span><span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token class-name\\">String</span> input <span class=\\"token operator\\">=</span> inputArea<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getText</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">byte</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> inputBytes <span class=\\"token operator\\">=</span> input<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getBytes</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">StandardCharsets</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">UTF_8</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">byte</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> outputBytes <span class=\\"token operator\\">=</span> cipher<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">doFinal</span><span class=\\"token punctuation\\">(</span>inputBytes<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token class-name\\">String</span> output <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">(</span>outputBytes<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">StandardCharsets</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">UTF_8</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            outputArea<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">setText</span><span class=\\"token punctuation\\">(</span>output<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Exception</span> e<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token class-name\\">JOptionPane</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">showMessageDialog</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"Error encrypting: \\"</span>\\n                    <span class=\\"token operator\\">+</span> e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getMessage</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"Error\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">JOptionPane</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">ERROR_MESSAGE</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">decrypt</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token class-name\\">String</span> algorithm <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">)</span> algorithmBox<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getSelectedItem</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token class-name\\">String</span> keyString <span class=\\"token operator\\">=</span> keyField<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getText</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">byte</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> keyBytes <span class=\\"token operator\\">=</span> keyString<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getBytes</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token class-name\\">SecretKey</span> key<span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>algorithm<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">equals</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"DES\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                key <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">SecretKeySpec</span><span class=\\"token punctuation\\">(</span>keyBytes<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"DES\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n                key <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">SecretKeySpec</span><span class=\\"token punctuation\\">(</span>keyBytes<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"AES\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token class-name\\">Cipher</span> cipher <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">Cipher</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getInstance</span><span class=\\"token punctuation\\">(</span>algorithm<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            cipher<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">init</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Cipher</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">DECRYPT_MODE</span><span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token class-name\\">String</span> input <span class=\\"token operator\\">=</span> inputArea<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getText</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">byte</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> inputBytes <span class=\\"token operator\\">=</span> input<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getBytes</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">byte</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> outputBytes <span class=\\"token operator\\">=</span> cipher<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">doFinal</span><span class=\\"token punctuation\\">(</span>inputBytes<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token class-name\\">String</span> output <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">(</span>outputBytes<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            outputArea<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">setText</span><span class=\\"token punctuation\\">(</span>output<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Exception</span> e<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token class-name\\">JOptionPane</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">showMessageDialog</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"Error decrypting: \\"</span> <span class=\\"token operator\\">+</span>\\n                    e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getMessage</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"Error\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">JOptionPane</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">ERROR_MESSAGE</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> args<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">new</span> <span class=\\"token function\\">test01</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
